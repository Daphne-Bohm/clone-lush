(function ($) {

  /**
   * General purpose Knot Wrap behaviour.
   */
  Drupal.behaviors.knotWrapTools = {
    attach: function (context, settings) {
      // Prepare ajax link to update basket when required.
      if ($("#knot-wrap-update-basket").length < 1) {
        var href = Drupal.knotWrap.getPathPrefix() + 'lush-basket';
        var update_basket_link = $('<a href="' + href + '" id="not-wrap-update-basket" class="use-ajax"/>');
        $(".blackboard").append(update_basket_link);
      }
    }
  };

  /**
   * Provide a series of commands that the server can request the client perform.
   */

  // If misc.js isn't loaded js exception is happened. Only functions have prototypes.
  if (typeof Drupal.ajax != 'function') {
    return;
  }

  /**
   * When ajax for choose KW returns success this callback used to update FE & provide list of available KW.
   */
  Drupal.ajax.prototype.commands.knotWrapChooseKnotWrap = function (ajax, response, status) {
    if (typeof response != 'undefined' && response.data) {
      var storage = Drupal.knotWrap.getStorage();
      if (response.data.knot_wraps) {
        storage.knot_wraps = response.data.knot_wraps;

        Drupal.knotWrap.updateStorage(storage);
        Drupal.knotWrap.advanceStage('choose_knot_wrap');
        Drupal.knotWrap.renderData();

        var settings = response.settings || Drupal.settings;
        // Attach behaviours as we need to update events on new rendered content.
        Drupal.attachBehaviors($('.knot-wraps-list'), settings);

      }
      // This shouldn't be triggered as knotWrapError ajax command invoked if KW has no items or another error ocurred.
      else {
        Drupal.knotWrap.showError(Drupal.t("Sorry, we're experiencing a problem. Please try again later."));
      }
    }
  };

  /**
   * When ajax for add2basket logic returns success this routine is invoked.
   */
  Drupal.ajax.prototype.commands.knotWrapAddToBasket = function (ajax, response, status) {
    if (typeof response != 'undefined' && response.data) {
      // If KW was added to basked successfully we need to update the basket.
      if ($('body').hasClass("cart-loaded")) {
        $(".object-cart-slideout-wrapper .view-lush-shopping-cart-block").remove();
        $('#knot-wrap-update-basket').trigger("click");
      }

      // Hide & erase all footer data.
      Drupal.knotWrap.removeFooter(true);

      // Redirect to the checkout dialog page.
      window.location = Drupal.settings.basePath + 'add-to-basket';
    }
  };

  /**
   * Used to handle all BE errors for KW FE logic.
   */
  Drupal.ajax.prototype.commands.knotWrapError = function (ajax, response, status) {
    if (typeof response != 'undefined' && response.error) {
      // If add to basket modal opened, close it to render errors.
      if ($('.knot-wrap__add-to-basket-content .knot-wrap__arrow--action').length) {
        Drupal.knotWrap.closeAddToBasketConfirmModal();
      }

      Drupal.knotWrap.showError(response.error.msg);
    }
  };

})(jQuery);
