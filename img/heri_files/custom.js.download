(function ($) {
  Drupal.knotWrap = Drupal.knotWrap || {};

  Drupal.behaviors.knotWrap = {
    attach: function (context, settings) {
      // Define customStorage that we will use in case if localStorage doesn't work. For example, in Private Browsing
      // Mode in Safari.
      Drupal.knotWrap.defineCustomStorage();

      // Warn user if his browser doesn't support localStorage. We should do it only once on page load.
      if (!Drupal.knotWrap.checkLocalStorage() && context == document) {
        alert(Drupal.t('Your web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.'));
      }

      // Validate Local storage. We have lot of cases when LS could be corrupted - when you push new code, when user
      // had corrupted it due to the killing browser or resetting his PC. This LS should be self regenerating.
      Drupal.knotWrap.validateLocalStorage();

      // Bind actions.

      // General footer actions.
      var knotWrap = $('#kwModule', context),
        knotWrapArrow = knotWrap.find('#kwArrow'),
        knotWrapButton = $('#knot-wrap-button', context),
        knotWrapDelete = $('.knot-wrap__cancel', context);

      // Unbind previous events.
      knotWrap.off('click');

      knotWrapArrow.off('click').on('click', function () {
        Drupal.knotWrap.openFooter(knotWrap);
      });

      knotWrapDelete.off('click').on('click', function (event) {
        event.preventDefault();
        Drupal.theme('sliderReInit');
        Drupal.knotWrap.deleteData();
      });

      // Product page area.
      knotWrapButton.off('click').on('click', function (event) {
        event.preventDefault();

        var storage = Drupal.knotWrap.getStorage();

        // Prevent adding products if we are on advanced stage.
        if (storage.stage && storage.stage != 'choose_products') {
          $(this).addClass('disabled');
          return false;
        }

        knotWrap.addClass('opened');
        Drupal.knotWrap.showFooter();
        Drupal.knotWrap.saveData();
        Drupal.theme('sliderReInit');
        Drupal.knotWrap.renderData();
        Drupal.knotWrap.updateChooseKnotWrapLink();
      });

      Drupal.theme('currencySymbol');
      Drupal.theme('sliderReInit');
      Drupal.knotWrap.renderData();
      Drupal.knotWrap.updateChooseKnotWrapLink();

      // Footer slot actions.
      knotWrap.on('click', '.knot-wrap--close', function () {
        var storage = Drupal.knotWrap.getStorage();
        var index = $(this).data('index');

        switch (true) {
          case !storage.stage || storage.stage == 'choose_products':
            Drupal.knotWrap.deleteItem(index);
            break;

          case storage.stage == 'choose_knot_wrap':
            // Delete chosen KW context & reset view.
            Drupal.knotWrap.resetKnotWrapSelection();
            break;
        }
      });

      // Back link for choose KW logic.
      knotWrap.on('click', '.knot-wrap__back', function () {
        // Delete chosen KW context.
        Drupal.knotWrap.resetKnotWrapSelection();

        Drupal.knotWrap.advanceStage('choose_products');
        Drupal.theme('sliderReInit');

        Drupal.knotWrap.renderData();
      });

      // Confirm knot wrap selection on choose_knot_wrap stage.
      $('#kwConfirm').off('click').on('click', function (event) {
        event.preventDefault();

        var $this = $(this),
            storage = Drupal.knotWrap.getStorage();

        var kwIndex = storage.chosenKnotWrapIndex;

        if (typeof kwIndex === 'undefined') {
          Drupal.knotWrap.showError(Drupal.t('You need to select your knot wrap.'));

          return false;
        }

        var content = '';
        content += Drupal.theme('addToBasketOverview');
        $('body').addClass('knot-wrap__body').append(content);

        Drupal.knotWrap.confirmKnotWrap(kwIndex);
        Drupal.knotWrap.totalPrice(storage);

        // Attach behaviours to process Drupal ajax links.
        Drupal.attachBehaviors($('.knot-wrap__overflow'), Drupal.settings);

        // Update Drupal ajax link options.
        Drupal.knotWrap.updateAddToBasketKnotWrapLink();

        // Confirm knot wrap back button.
        $('.knot-wrap__add-to-basket-content').off('click').on('click', '.knot-wrap__arrow--action', function (e) {
          Drupal.knotWrap.closeAddToBasketConfirmModal();
        });
      });

      // Show knot wrap products in basket.
      Drupal.knotWrap.toggleProductsBasket();
    }
  };

  /**
   * Used e.g. when BE returns errors on add to basket submit to show message in footer's header.
   */
  Drupal.knotWrap.closeAddToBasketConfirmModal = function () {
    $('body').removeClass('knot-wrap__body');
    $('.knot-wrap__overflow').remove();
  };

  // Expand footer.
  Drupal.knotWrap.openFooter = function (element) {
    element.toggleClass('opened');
  };

  // Show footer - only if LS has an items.
  Drupal.knotWrap.showFooter = function () {
    var module = $('#kwModule');
    module.addClass('knot-wrap-visible');
  };

  /**
   * Reset knot wraps list to default state.
   */
  Drupal.knotWrap.resetKnotWrapSelection = function () {
    var storage = Drupal.knotWrap.getStorage();
    var $kwModule = $('#kwModule');

    $kwModule.find('.knot-wrap__item[data-item-index]').removeClass('ghost')
      .find('.knot-wrap--close').hide();

    storage.chosenKnotWrapIndex = undefined;
    storage.confirmedKnotWrap = null;

    Drupal.knotWrap.updateStorage(storage);
  };

  /**
   * Set knot wrap storage with init data.
   */
  Drupal.knotWrap.reinitStorage = function () {
    var storage = {
      "knotWrap": 0,
      "products": [],
      // Returned list of available knot wraps for chosen  products set's volume.
      "knot_wraps": [],
      // The KW to which user wants wrap added products.
      "confirmedKnotWrap": null,
      "price": 0,
      // Determines stage of KW footer workflow.
      "stage": 'choose_products',
      "quantity": 0,
      "volume": 0
    };

    Drupal.knotWrap.updateStorage(storage);

    return storage;
  };

  /**
   * Validate LS. We have lot of cases when LS could be corrupted - when you push new code, when user had corrupted it
   * due to the killing browser or resetting his PC. This LS should be self regenerating.
   */
  Drupal.knotWrap.validateLocalStorage = function () {
    var storage = Drupal.knotWrap.getStorage();
    var validated = false;
    var errors = -1;

    while (!validated) {
      switch (true) {

        case Boolean(!storage || typeof storage != 'object'):
          // Reinit LS.
          storage = Drupal.knotWrap.reinitStorage();
          break;

        case Boolean(!storage.products):
          // Set default property.
          storage.products = [];
          break;

        case Boolean(!storage.knot_wraps):
          // Set default property.
          storage.knot_wraps = [];
          break;

        case Boolean(typeof storage.confirmedKnotWrap == 'undefined'):
          // Set default chosen knot wrap.
          storage.confirmedKnotWrap = null;
          break;

        case Boolean(!storage.stage):
          // Set default step.
          storage.stage = 'choose_products';
          break;

        default:
          validated = true;
      }

      // One iteration will be equal to 0 errors.
      errors++;
    }

    // Update storage if it had errors that were fixed.
    if (errors > 0 && validated) {
      Drupal.knotWrap.updateStorage(storage);
    }
  };

  /**
   * Helper callback to update storage.
   */
  Drupal.knotWrap.updateStorage = function (storage) {
    if (typeof storage == 'object') {
      storage = JSON.stringify(storage);

    }

    if (typeof storage == 'string') {
      Drupal.knotWrap.setStorage(
        'knotWrap',
        storage
      );
    }
  };

  /**
   * Enable / disable button depends on context.
   */
  Drupal.knotWrap.updateAddToKnotWrapState = function () {
    if (typeof Drupal == 'undefined' || !Drupal.settings || !Drupal.settings.Lush) return;
    var kw_settings = Drupal.settings.Lush.knotWrap;
    var $addKnotWrap = $('#knot-wrap-button');

    if (kw_settings && kw_settings.product) {
      $addKnotWrap.removeClass('disabled');
    } else {
      $addKnotWrap.addClass('disabled');
    }
  };

  /**
   * Manages different view states.
   *
   * @param context
   * @param state
   */
  Drupal.knotWrap.setViewContext = function (context, state) {
    switch (true) {
      case Boolean(context == 'choose_knot_wrap'):
        var $kwChoose = $('#kwChoose');
        var $kwConfirm = $('#kwConfirm');
        var $kwProductsOverview = $('#kwProductsOverview');
        var $kwModule = $('#kwModule');
        var $addKnotWrap = $('#knot-wrap-button');
        var storage = Drupal.knotWrap.getStorage();

        switch (state) {
          case true:
            $kwChoose.fadeOut();
            $kwConfirm.fadeIn();

            // Preselect chosen KW.
            if (typeof storage.chosenKnotWrapIndex != 'undefined') {
              var $knotWrapsList = $kwModule.find('.knot-wrap__item[data-item-index]');

              $knotWrapsList.addClass('ghost').find('.knot-wrap--close').hide();

              // Highlight element.
              $knotWrapsList.parent().find('.knot-wrap__item[data-item-index="' + storage.chosenKnotWrapIndex + '"]')
                .removeClass('ghost').find('.knot-wrap--close').show();
            }

            $kwProductsOverview.show();
            $kwModule.addClass('knot-wraps-list');
            $addKnotWrap.addClass('disabled');

            break;

          default:
            $kwConfirm.fadeOut();
            $kwChoose.fadeIn();
            $kwProductsOverview.hide();
            $kwModule.removeClass('knot-wraps-list');

            Drupal.knotWrap.updateAddToKnotWrapState();
            break;
        }
        break;
    }
  };

  /**
   * Change KW stage - the interface step of the footer.
   */
  Drupal.knotWrap.advanceStage = function (stage) {
    var storage = Drupal.knotWrap.getStorage();

    // It should be happened never as storage is validated on behaviour attach.
    if (!storage) return false;

    if (!storage.stage || stage != storage.stage) {
      storage.stage = stage;

      Drupal.knotWrap.updateStorage(storage);
    }
  };

  Drupal.knotWrap.createJSON = function (data) {
    var knotWrap = Drupal.knotWrap.getStorage();
    var product = data.product;
    var error = Drupal.knotWrap.validateProduct(data, knotWrap);

    // If all validations passed we add the product.
    if (error) {
      Drupal.knotWrap.showError(error);
    }
    else {
      knotWrap.products.push(product);
      Drupal.knotWrap.calculateAll(product, knotWrap, true);
    }

    return knotWrap;
  };

  // Create LS
  Drupal.knotWrap.saveData = function () {
    var product = Drupal.settings.Lush.knotWrap;

    if (product.product === null) {
      Drupal.knotWrap.showError(
        Drupal.t('This product is not available for wrapping.')
      );

      return false;
    }

    var data = JSON.stringify(Drupal.knotWrap.createJSON(product));

    Drupal.knotWrap.setStorage('knotWrap', data);
  };

  /**
   * Generate slots html.
   *
   * @param items
   */
  Drupal.knotWrap.renderFooterBody = function (items) {
    var data = Drupal.knotWrap.getStorage();

    // If items wasn't selected use empty footer behaviour by default..
    items = items || {};

    var content = '';

    if(items.length === 0) {
      if ($('#kwModule').width() > 768) {
        content += Drupal.theme('knotWrapEmptyHtml');
      }
      else {
        content += '<div class="knot-wrap__item"></div><div class="knot-wrap__item"></div>';
      }
    }
    else {
      Drupal.knotWrap.showFooter();

      $.each(items, function (index, el) {
        content += Drupal.theme('knotWrapProduct', el.image, el.name, index, el.currency_symbol, el.price);
      });

      if($('#kwModule').width() > 768 && items.length < 3) {
        content += '<div class="knot-wrap__item"></div><div class="knot-wrap__item"></div>';
      }
    }

    // Avoid empty decimal places.
    var price = data.price ? data.price.replace(/\.00/, '')
      : data.price;

    Drupal.theme('updatePriceQuantity', data.quantity, price);

    $('#knotWrapItems').html(content);
    $('#knotWrapItems').find('.knot-wrap__item:last-child').addClass('last');
    Drupal.theme('sliderInit');
  };

  // Render LS
  Drupal.knotWrap.renderData = function (dataStorage) {
    // This data already validated.
    var data = Drupal.knotWrap.getStorage();

    // Knot Wrap router.
    switch (true) {
      // If stage isn't set or it's choosing products then render products.
      case !data.stage || data.stage == 'choose_products':
        // The products is default property of LS & should be available always. It's validated on each request.
        Drupal.knotWrap.renderFooterBody(data.products);
        Drupal.knotWrap.setViewContext('choose_knot_wrap', false);
        break;

      case data.stage == 'choose_knot_wrap':
        Drupal.theme('sliderReInit');

        // The knot_wraps is default property of LS & should be available always. It's validated on each request.
        Drupal.knotWrap.renderFooterBody(data.knot_wraps);
        Drupal.knotWrap.setViewContext('choose_knot_wrap', true);
        Drupal.knotWrap.productOverview(data.products);

        // Slot body of the knot wraps list.
        $('.knot-wraps-list .knot-wrap__item[data-item-index]')
          .off('click').on('click', function (event) {

          event.preventDefault();

          var $this = $(this);

          $('.knot-wraps-list .knot-wrap__item[data-item-index]')
            .addClass('ghost').find('.knot-wrap--close').hide();

          // Highlight element.
          $this.removeClass('ghost').find('.knot-wrap--close').show();

          Drupal.knotWrap.updateChosenKnotWrap($this.data('item-index'));
        });
        break;
    }
  };

  Drupal.knotWrap.validateProduct = function (data, knotWrap) {
    var settings = data.settings,
      knotWrapProductsQty = knotWrap.products.length,
      productStock = data.product.quantity,
      currentVolume = parseInt(knotWrap.volume),
      productVolume = parseInt(data.product.volume),
      volume = currentVolume + productVolume;

    // By default we add 1 items to each slot.
    var requestedQuantity = 1;

    // But we need to check if such product already was added to another slots.
    $.each(knotWrap.products, function (i, v) {
      if (v && v.sku && v.sku == data.product.sku) {
        ++requestedQuantity;
      }
    });

    switch (true) {
      case productStock < 1:
        return Drupal.t('This product is not available on stock');

      case productStock < requestedQuantity:
        return Drupal.t('This product is not available on stock');

      case volume > settings.max_volume:
        return Drupal.t('Knot Wrap has exceeded max size');

      case knotWrapProductsQty >= settings.products_limit:
        return Drupal.t(
          'Knot Wrap can store not more than @limit products',
          {'@limit' : settings.products_limit}
        );
    }

    return false;
  };

  // Calculate products quantity, price and volume.
  Drupal.knotWrap.calculateAll = function (product, knotWrap, checkQuantity) {
    var price = 0,
      volume = 0,
      quantity = knotWrap.products.length,
      currentPrice = parseFloat(knotWrap.price),
      productPrice = parseFloat(product.price),
      currentVolume = parseInt(knotWrap.volume),
      productVolume = parseInt(product.volume);

    if (checkQuantity) {
      price = currentPrice + productPrice;
      volume = currentVolume + productVolume;
    }
    else {
      quantity -= 1;
      price = currentPrice - productPrice;
      volume = currentVolume - productVolume;
    }

    knotWrap.price = price.toFixed(2);
    knotWrap.volume = volume;
    knotWrap.quantity = quantity;
  };

  // Delete LS
  Drupal.knotWrap.deleteData = function () {
    var knotWrap = Drupal.knotWrap.getStorage();
    var content = '';

    if (!knotWrap) {
      return false;
    }

    content += Drupal.theme('deletePopUp');
    $('body').addClass('knot-wrap__body').append(content);

    $('.delete-knot-wrap').off('click').on('click', function (event) {
      event.preventDefault();

      Drupal.knotWrap.removeFooter();
      Drupal.knotWrap.updateAddToKnotWrapState();
    });

    $('.cancel-knot-wrap').off('click').on('click', function (event) {
      event.preventDefault();
      Drupal.theme('sliderReInit');
      Drupal.knotWrap.renderData();
      removeContent();
    });

    function removeContent() {
      $('.knot-wrap__overflow').remove();
      $('body').removeClass('knot-wrap__body');
    }
  };

  /**
   * Delete the footer information & the footer itself.
   */
  Drupal.knotWrap.removeFooter = function(keep_overflow) {
    keep_overflow = keep_overflow || false;
    var content = '';

    // We need to reinit storage with empty data as this object should be available for content to decrease complexity
    // of source supporting & checks quantity.
    Drupal.knotWrap.reinitStorage();

    content += Drupal.theme('knotWrapEmptyHtml');
    $('#knotWrapItems').html(content);
    $('#kwModule').removeClass('opened knot-wrap-visible');

    Drupal.theme.prototype.updatePriceQuantity(0, '0');

    // For better UI we don't hide add2basket confirm modal as user is redirecting to another page.
    // To avoid frequently content update several times we keep modal & wait until page reload.
    if (!keep_overflow) {
      $('.knot-wrap__overflow').remove();
      $('body').removeClass('knot-wrap__body');
    }
  };

  Drupal.knotWrap.productOverview = function (products) {
    var content = '';

    $.each(products, function (index, el) {
      content += Drupal.theme('productOverviewHtml', el.image, el.name);
    });

    $('.knot-wrap__product-overview-items, .knot-wrap__add-to-basket-products').html(content);
  };

  Drupal.knotWrap.knotWrapOverview = function (image, name) {
    var content = '';

    content += '<img src="'+ image + '" name="' + name +'" />';

    $('.knot-wrap__add-to-basket-knot-wrap').html(content);
  };

  Drupal.knotWrap.totalPrice = function (knotWrap) {
    var price = 0,
      productsPrice = parseFloat(knotWrap.price),
      knotWrapPrice = parseFloat(knotWrap.knot_wraps[knotWrap.chosenKnotWrapIndex].price);

      // Avoid empty decimal places.
      price = (productsPrice + knotWrapPrice).toFixed(2);

      $('.knot-wrap__add-to-basket-price').html(price ? price.replace(/\.00/, '') : price);
  };

  // Delete specific item from LS.
  Drupal.knotWrap.deleteItem = function (itemIndex) {
    var knotWrap = Drupal.knotWrap.getStorage();
    var index = parseInt(itemIndex);

    if (knotWrap.products.length > 0) {
      if (knotWrap.products.length > 1) {
        Drupal.knotWrap.calculateAll(knotWrap.products[index], knotWrap, false);
        knotWrap.products.splice(index, 1);
      }
      // If we deleting last product we need to reinit local storage, otherwise it will cause lot of problems in case
      // of LS's price corruption by some reason (e.g. browser crash can cause it).
      else {
        knotWrap = Drupal.knotWrap.reinitStorage();
      }
    }

    Drupal.knotWrap.updateStorage(knotWrap);

    Drupal.theme('sliderReInit');
    Drupal.knotWrap.renderData();
  };

  Drupal.theme.prototype.knotWrapEmptyHtml = function () {
    var content = '';

    for (var i = 0; i < 4; i++) {
      content += '<div class="knot-wrap__item"></div>';
    }

    return content;
  };

  Drupal.theme.prototype.knotWrapProduct = function (image, name, nid, currency_symbol, price) {
    var content = '';

    content += '<div class="knot-wrap__item" data-item-index="' + nid + '">';
    content += '<img src="' + image + '" alt="' + name + '" class="knot-wrap__item-image" />';
    content += '<span class="knot-wrap--close" data-index="' + nid + '"><i class="knot-wrap__item-close-icon"></i></span>';
    content += '<h3 class="knot-wrap__item-title">' + name + '</h3>';

    var productPrice = Drupal.t(
      '!currency!price / each',
      {'!currency': currency_symbol, '!price': price}
    );

    content += '<div class="knot-wrap__item-price">' + productPrice + '</div>';
    content += '</div>';

    return content;
  };

  Drupal.theme.prototype.sliderInit = function () {
    $('#knotWrapItems').flickity({
      lazyLoad: true,
      contain: true,
      groupCells: '100%',
      cellSelector: '.knot-wrap__item',
      cellAlign: 'left',
      draggable: true,
      pageDots: true
    });
    $('#knotWrapItems').flickity( 'selectCell', '.last', true, true);
  };

  Drupal.theme.prototype.sliderReInit = function () {
    $('#knotWrapItems').flickity();
    $('#knotWrapItems').flickity('destroy');
  };

  Drupal.theme.prototype.deletePopUp = function () {
    var content = '';

    content += '<div class="knot-wrap__overflow">';
    content += '<div class="knot-wrap__delete-data-content">';
    content += '<h1>' + Drupal.t('Cancel Knot Wrap?') + '</h1>';
    content += '<div class="knot-wrap__delete-data-slogan">' + Drupal.t('Are you sure you want to cancel this Knot Wrap build?') + '</div>';
    content += '<div class="knot-wrap__delete-data-actions"><a href="#" class="delete-knot-wrap" >' + Drupal.t('Yes, get rid of it') + '</a>';
    content += '<a href="#" class="cancel-knot-wrap" >' + Drupal.t('No, keep building') + '</a></div>';
    content += '</div>';
    content += '</div>';

    return content;
  };

  Drupal.theme.prototype.updatePriceQuantity = function(quantity, price) {
    $('#kwPrice').html(price);
    $('#kwQuantity').html('( ' + quantity + ' )');
  };

  Drupal.theme.prototype.currencySymbol = function () {
    var currency = Drupal.settings.Lush.knotWrap.settings.currency.symbol;

    $('#currencySymbol, .knot-wrap__add-to-basket-currency-symbol').html(currency);
  };

  /**
   * Implement custom Storage that we will use in case if localStorage doesn't work.
   */
  Drupal.knotWrap.defineCustomStorage = function () {
    var items = {};

    function CustomStorage() {}

    CustomStorage.prototype.getItem = function(key) {
      return items[key];
    };

    CustomStorage.prototype.setItem = function(key, value) {
      items[key] = value;
    };

    CustomStorage.prototype.key = function(index) {
      return Object.keys(items)[index];
    };

    CustomStorage.prototype.get = function() {
      return items;
    };

    Object.defineProperty(CustomStorage.prototype, "length", {
      get: function length() {
        return Object.keys(items).length;
      }
    });

    window.customStorage = new CustomStorage();
  };

  /**
   * Check if localStorage available and works. If not, use custom storage. Note: custom storage can save data only until
   * page reload.
   */
  Drupal.knotWrap.checkLocalStorage = function () {
    var test;

    // Implement a test of localStorage.
    try {
      var x = 'test-localstorage-' + Date.now();
      localStorage.setItem(x, x);
      var y = localStorage.getItem(x);
      localStorage.removeItem(x);
      if (y !== x) {
        throw new Error();
      }
      // localStorage is fully functional.
      test = true;
    } catch (e) {
      // localStorage doesn't work properly.
      test = false;
    }

    return test;
  };

  /**
   * Get browser local storage knot wrap context data.
   */
  Drupal.knotWrap.getStorage = function () {
    var storage;

    if (Drupal.knotWrap.checkLocalStorage()) {
      // localStorage is fully functional.
      storage = localStorage.getItem('knotWrap');
    }
    else {
      // Fall back to a memory-based implementation.
      storage = customStorage.getItem('knotWrap');
    }

    return storage ? JSON.parse(storage) : storage;
  };

  Drupal.knotWrap.setStorage = function (name, data) {
    if (Drupal.knotWrap.checkLocalStorage()) {
      // localStorage is fine.
      localStorage.setItem(name, data);
    }
    else {
      // Fall back to a memory-based implementation.
      customStorage.setItem(name, data);
    }
  };

  Drupal.knotWrap.showError = function (text) {
    //@todo Check if adding closing arrow would be more user friendly.
    $('.knot-wrap__error-text').text(text);
    $('.knot-wrap__error-text, .knot-wrap__arrow_error').fadeIn('slow', function () {
      $(this).delay(3000).fadeOut('slow');
    });
  };

  /**
   * Override Drupal ajax properties to alter & validate ajax request.
   */
  Drupal.knotWrap.updateChooseKnotWrapLink = function () {
    if (!Drupal.ajax || !Drupal.ajax.kwChoose) return;

    // Bind before send command to ajax.
    Drupal.ajax.kwChoose.options.beforeSend = function (xmlhttprequest, options) {
      var storage = Drupal.knotWrap.getStorage();

      // Validate context before ajax.
      switch (true) {
        case Boolean(!storage.products.length):
          Drupal.knotWrap.showError(
            Drupal.t('You need to add a products before choosing wrapping material.')
          );
          return false;

        case storage.volume < 1:
          Drupal.knotWrap.showError(
            Drupal.t('Your products volume can not be calculated.')
          );
          return false;
      }

      var volume = storage.volume,
        baseLink = Drupal.knotWrap.getPathPrefix() + 'knot-wrap/ajax/choose-knot-wrap/',
        link = $('#kwChoose'),
        href = baseLink + volume;

      link.attr('href', href);

      options.url = href;
      Drupal.ajax.kwChoose.ajaxing = true;

      return Drupal.ajax.kwChoose.beforeSend(xmlhttprequest, options);
    };
  };

  /**
   * Drupal is multilingual & if you use one path for all langs the user want be able to create
   * an order for requested country.
   */
  Drupal.knotWrap.getPathPrefix = function () {
    var prefix = Drupal.settings.basePath;

    if (Drupal.settings.pathPrefix) {
      prefix += Drupal.settings.pathPrefix;
    }

    return prefix;
  };

  /**
   * Override Drupal ajax properties to alter & validate ajax request.
   */
  Drupal.knotWrap.updateAddToBasketKnotWrapLink = function () {
    if (!Drupal.ajax || !Drupal.ajax.kwAdd) return;

    // Bind before send command to ajax.
    Drupal.ajax.kwAdd.options.beforeSend = function (xmlhttprequest, options) {
      // Get products & chosen KW from storage.
      var storage = Drupal.knotWrap.getStorage();

      // Validate context before ajax.
      switch (true) {
        case Boolean(!storage.products || !storage.products.length):
          Drupal.knotWrap.showError(
            Drupal.t('No products available for this knot wrap.')
          );
          return false;

        // If user didn't choose KW we can't issue add to basket request.
        case !storage.confirmedKnotWrap:
          Drupal.knotWrap.showError(
            Drupal.t('You need to choose knot wrap to add it to the basket.')
          );
          return false;
      }

      // By default quantity equals to the stock of the product, but we need request server with bought product qty.
      // As footer can not have more than 1 item per slot we just use 1 quantity here.
      $.each(storage.products, function(index, value) {
        value.quantity = 1;
      });

      // Prepare data for BE.
      options.data = JSON.stringify(
        {
          "knotWrap": storage.confirmedKnotWrap,
          "products": storage.products
        }
      );

      Drupal.ajax.kwAdd.ajaxing = true;

      return Drupal.ajax.kwAdd.beforeSend(xmlhttprequest, options);
    };
  };

  Drupal.knotWrap.confirmKnotWrap = function (itemIndex) {
    var knotWrap = Drupal.knotWrap.getStorage(),
        index = parseInt(itemIndex);

    knotWrap.confirmedKnotWrap = knotWrap.knot_wraps[index];
    Drupal.knotWrap.updateStorage(knotWrap);
    Drupal.knotWrap.knotWrapOverview(knotWrap.confirmedKnotWrap.image, knotWrap.confirmedKnotWrap.name);
  };

  Drupal.theme.prototype.addToBasketOverview = function () {
    var content = '';

    content += '<div class="knot-wrap__overflow">';
    content += '<div class="knot-wrap__add-to-basket-content">';

    content += '<div class="knot-wrap__add-to-basket-row">';
    content += '<span class="knot-wrap__arrow--action"><i class="knot-wrap__arrow-icon"></i></span>';
    content += '<h3>' + Drupal.t('Your Knot Wrap') + '</h3></div>';

    content += '<div class="knot-wrap__add-to-basket-row knot-wrap__add-to-basket-total-price">';
    content += Drupal.t('Total: ') + '<span class="knot-wrap__add-to-basket-currency-symbol"></span><span class="knot-wrap__add-to-basket-price"></span></div>';

    content += '<div class="knot-wrap__add-to-basket-row knot-wrap__add-to-basket-knot-wrap"></div>';

    content += '<div class="knot-wrap__add-to-basket-row knot-wrap__add-to-basket-products"></div>';
    content += '<div class="knot-wrap-add-to-basket-wrapper">';
    content += '<a id="kwAdd" href="' + Drupal.knotWrap.getPathPrefix() + 'knot-wrap/ajax/add-to-basket" class="use-ajax knot-wrap-add-to-basket basket">';
    content +=  Drupal.t('Add to basket');
    content +=  '</a>';
    content +=  '</div>';

    content += '</div>';
    content += '</div>';

    return content;
  };

  /**
   * Store user selection to pre highlight it on page reloads, as button is re rendered & loses set attributes.
   */
  Drupal.knotWrap.updateChosenKnotWrap = function (index) {
    knotWrap = Drupal.knotWrap.getStorage();

    // Used to preselect chosen KW after reload.
    knotWrap.chosenKnotWrapIndex = index;

    Drupal.knotWrap.updateStorage(knotWrap);
  };

  Drupal.theme.prototype.productOverviewHtml = function (image, name) {
    var content = '';

    content += '<div class="knot-wrap__product-overview-item">';
    content += '<img src="' +  image + '" alt="' + name + '" />';
    content += '</div>';

    return content;
  };

  /**
   * Show product names for the knot wrap in the basket.
   */
  Drupal.knotWrap.toggleProductsBasket = function () {
    $('.knot-wrap__basket-products-count').off('click').on('click', function (event) {
      var $this = $(this),
        productsTitlesBox = $this.next('.knot-wrap__basket-products'),
        allProductsTitlesBox = $('.knot-wrap__basket-products'),
        allProductsCount = $('.knot-wrap__basket-products-count');

        if(productsTitlesBox.hasClass('opened')) {
          productsTitlesBox.removeClass('opened');
          $this.removeClass('products-expanded');
        }
        else {
          allProductsTitlesBox.removeClass('opened');
          allProductsCount.removeClass('products-expanded');
          productsTitlesBox.addClass('opened');
          $this.addClass('products-expanded');
        }
    });
  };
}(jQuery));
